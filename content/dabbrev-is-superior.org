#+TITLE: dabbrev is superior
#+AUTHOR: lalo
#+STARTUP: indent
#+DATE: 2023-05-29
#+TAGS: emacs

People love automatic code completion.  In modern text editors/IDEs you'll always see a flashing window that suggests you what to type.  I think completion popup is overused.  I also think that logic behind that popup is too complex.  There's one feature in Emacs that only a few of people use which is superior to all types of completion found in other environments.  In this article I'll try to provide my arguments about how awesome =dabbrev= is.

* Dynamic abbreviations

From Emacs manual: ~“dynamic abbrevs” allow the meanings of abbreviations to be determined automatically from the contents of the buffer, but dynamic abbrev expansion happens only when you request it explicitly~.

In fact =dabbrev= is just a command that tries to complete the word you're typing by looking into current buffer and other buffers opened in Emacs.  This feature is blazingly fast, it works in any buffer and just does the job out of the box without any configuration.

There are a couple of other things that make this package even nicer.  First, you can complete a series of words by hitting =<SPC> M-/= after completion.  Second, it is possible to filter buffers where search will happen.

* How it feels

To make my explanations easier I want to compare =dabbrev= with completion provided by =LSP=.  Suppose you're working on a project with libraries, and you just need autocompletion to work productively.

Generally there are two use cases for completion.
1. word, you're completing is too long; you want to type small part of that word and complete it.
2. you forgot how a symbol is named, you're lazy to look into documentation and want completion now.

For first case =dabbrev= works like a charm.  You just hit =M-/= and continue coding.  0 seconds.  =LSP= and other IDEs do not work that well in this case.  A completion window will pop up (if you're using Emacs you'll have to wait for that popup, let's be serious).  You'll have to look at that popup, search with your eyes for the needed entry, use arrow keys to navigate it and press enter.  Wow.  And people say that Emacs users type a lot of keybindings.

Most of the time =LSP= performs better in second case.  It's improtant to note that with Emacs it's not that hard to search for that symbol's name; there are plenty searching commands like =grep=, =occur= etc.  When used correctly they can operate very quickly.  Everyone will hate me but here are some tips that can user experience with =dabbrev=:
 * write in simple programming language that doesn't have namespaces.  Yep, C or Emacs Lisp, it doesn't matter.  You'll type a prefix for forgotten symbol and =dabbrev= will do the rest of the job.
 * write names that make sense in your code.  Trust me, it will be both easier to remember and easier to complete.

Wait, how about libraries? =dabbrev= works only with open buffers, right? Well, why not open all the needed library files? This simple approach allows =dabbrev= to complete functions and types from libraries.  Again, without any configuration.

You could notice that most of my arguments apply to programming in the C language.  That is correct, I've done most of my programming inside of Emacs in C.  It's worth noting that =dabbrev= works good with any other languages too, it just doesn't happen to feel the context of your code.

The only usecase (which happens relatively rarely based on your programming language of choice) is when you need to perform a context-sensitive completion.  For example, you typed module name, placed dot after it and want to complete a function name.  =dabbrev= doesn't solve this problem.  If this situation happens too often then I recommend a hybrid solution: use smart completion framework when you need to complete some context specific symbol and use =dabbrev= when you need to quickly complete a word that you typed before.

* Conclusion

I consider =dabbrev= to be the greatest completion framework at the moment.  It's simple, fast, predictable and doesn't eat 200 MB of memory.  When used correctly it can beat any other solution in most cases.  I didn't write about half of things I wanted to write, but I think this article got too long.  One last thing I should say about old development environment builtin into Emacs: there's something beatiful about it.  Emacs just admires *simplicity* in my editing routine and I love it.
